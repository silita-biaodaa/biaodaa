<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:p="http://www.springframework.org/schema/p"
	   xmlns:cache="http://www.springframework.org/schema/cache"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
   	   http://www.springframework.org/schema/aop
   	   http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd">

	<!--#####echcache start  ####  -->
	<cache:annotation-driven cache-manager="cacheManager"/>
	<!-- cacheManager工厂类，指定ehcache.xml的位置 -->
	<bean id="cacheManagerFactory" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean"
		  p:configLocation="classpath:config/cache/ehcache.xml" p:shared="true" />
	<!-- 声明cacheManager -->
	<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager"
		  p:cacheManager-ref="cacheManagerFactory" />
	<!-- ####echcache end ####-->


    <!-- 激活annotation功能 -->
	<context:annotation-config />


	<context:component-scan base-package="com.silita">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<import resource="applicationContext-datasource.xml" />

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:config/mybatis/mybatis-config.xml"></property>
		<property name="mapperLocations">
			<list>
				<value>classpath*:config/mybatis/mappers/*.xml</value>
			</list>
		</property>
		<property name="plugins">
			<array>
				<bean class="com.github.pagehelper.PageHelper">
					<property name="properties">
						<value>
							dialect=mysql
							reasonable=true
						</value>
					</property>
				</bean>
			</array>
		</property>
	</bean>

	<bean id="mySqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">
		<constructor-arg index="0">
			<ref bean="sqlSessionFactory" />
		</constructor-arg>
	</bean>

	<!-- spring与mybatis整合配置，扫描所有dao -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"
		  p:basePackage="com.silita.biaodaa.dao" p:sqlSessionFactoryBeanName="sqlSessionFactory" />

	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true" propagation="NOT_SUPPORTED" />
            <tx:method name="batch*" rollback-for="java.lang.Exception" propagation="REQUIRED" />
            <tx:method name="*" rollback-for="java.lang.Exception" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut id="testPointcut1"
			expression="execution(* com.silita..*Service.*(..))" />
		<aop:pointcut id="testPointcut2"
					  expression="execution(* com.silita..*ServiceImpl.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="testPointcut1" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="testPointcut2" />
	</aop:config>
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- 以字节为单位的最大上传文件的大小 the maximum file size in bytes -->
        <property name="maxUploadSize" value="6000000" />
    </bean>
	<!-- 加载redis配置文件 -->
	<context:property-placeholder location="classpath:config/biaodaa.properties" />

	<import resource="applicationContext-redis.xml" />

	<import resource="dubbo-provider.xml" />
	<import resource="dubbo-consumer.xml" />



</beans>
